/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.sb.model.Inventory;
import com.sb.model.InventoryModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Inventory service. Represents a row in the &quot;inventory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sb.model.InventoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InventoryImpl}.
 * </p>
 *
 * @author amifxw0
 * @see InventoryImpl
 * @see com.sb.model.Inventory
 * @see com.sb.model.InventoryModel
 * @generated
 */
public class InventoryModelImpl extends BaseModelImpl<Inventory>
	implements InventoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a inventory model instance should use the {@link com.sb.model.Inventory} interface instead.
	 */
	public static final String TABLE_NAME = "inventory";
	public static final Object[][] TABLE_COLUMNS = {
			{ "InvId", Types.INTEGER },
			{ "ItemId", Types.INTEGER },
			{ "URL", Types.VARCHAR },
			{ "NoOfLicence", Types.INTEGER },
			{ "FileType", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table inventory (InvId INTEGER not null primary key IDENTITY,ItemId INTEGER,URL VARCHAR(75) null,NoOfLicence INTEGER,FileType VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table inventory";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sb.model.Inventory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sb.model.Inventory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sb.model.Inventory"));

	public InventoryModelImpl() {
	}

	public int getPrimaryKey() {
		return _InvId;
	}

	public void setPrimaryKey(int primaryKey) {
		setInvId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Integer(_InvId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	public Class<?> getModelClass() {
		return Inventory.class;
	}

	public String getModelClassName() {
		return Inventory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("InvId", getInvId());
		attributes.put("ItemId", getItemId());
		attributes.put("URL", getURL());
		attributes.put("NoOfLicence", getNoOfLicence());
		attributes.put("FileType", getFileType());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer InvId = (Integer)attributes.get("InvId");

		if (InvId != null) {
			setInvId(InvId);
		}

		Integer ItemId = (Integer)attributes.get("ItemId");

		if (ItemId != null) {
			setItemId(ItemId);
		}

		String URL = (String)attributes.get("URL");

		if (URL != null) {
			setURL(URL);
		}

		Integer NoOfLicence = (Integer)attributes.get("NoOfLicence");

		if (NoOfLicence != null) {
			setNoOfLicence(NoOfLicence);
		}

		String FileType = (String)attributes.get("FileType");

		if (FileType != null) {
			setFileType(FileType);
		}
	}

	public int getInvId() {
		return _InvId;
	}

	public void setInvId(int InvId) {
		_InvId = InvId;
	}

	public int getItemId() {
		return _ItemId;
	}

	public void setItemId(int ItemId) {
		_ItemId = ItemId;
	}

	public String getURL() {
		if (_URL == null) {
			return StringPool.BLANK;
		}
		else {
			return _URL;
		}
	}

	public void setURL(String URL) {
		_URL = URL;
	}

	public int getNoOfLicence() {
		return _NoOfLicence;
	}

	public void setNoOfLicence(int NoOfLicence) {
		_NoOfLicence = NoOfLicence;
	}

	public String getFileType() {
		if (_FileType == null) {
			return StringPool.BLANK;
		}
		else {
			return _FileType;
		}
	}

	public void setFileType(String FileType) {
		_FileType = FileType;
	}

	@Override
	public Inventory toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Inventory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		InventoryImpl inventoryImpl = new InventoryImpl();

		inventoryImpl.setInvId(getInvId());
		inventoryImpl.setItemId(getItemId());
		inventoryImpl.setURL(getURL());
		inventoryImpl.setNoOfLicence(getNoOfLicence());
		inventoryImpl.setFileType(getFileType());

		inventoryImpl.resetOriginalValues();

		return inventoryImpl;
	}

	public int compareTo(Inventory inventory) {
		int primaryKey = inventory.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Inventory inventory = null;

		try {
			inventory = (Inventory)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		int primaryKey = inventory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Inventory> toCacheModel() {
		InventoryCacheModel inventoryCacheModel = new InventoryCacheModel();

		inventoryCacheModel.InvId = getInvId();

		inventoryCacheModel.ItemId = getItemId();

		inventoryCacheModel.URL = getURL();

		String URL = inventoryCacheModel.URL;

		if ((URL != null) && (URL.length() == 0)) {
			inventoryCacheModel.URL = null;
		}

		inventoryCacheModel.NoOfLicence = getNoOfLicence();

		inventoryCacheModel.FileType = getFileType();

		String FileType = inventoryCacheModel.FileType;

		if ((FileType != null) && (FileType.length() == 0)) {
			inventoryCacheModel.FileType = null;
		}

		return inventoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{InvId=");
		sb.append(getInvId());
		sb.append(", ItemId=");
		sb.append(getItemId());
		sb.append(", URL=");
		sb.append(getURL());
		sb.append(", NoOfLicence=");
		sb.append(getNoOfLicence());
		sb.append(", FileType=");
		sb.append(getFileType());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.sb.model.Inventory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>InvId</column-name><column-value><![CDATA[");
		sb.append(getInvId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ItemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>URL</column-name><column-value><![CDATA[");
		sb.append(getURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>NoOfLicence</column-name><column-value><![CDATA[");
		sb.append(getNoOfLicence());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>FileType</column-name><column-value><![CDATA[");
		sb.append(getFileType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Inventory.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Inventory.class
		};
	private int _InvId;
	private int _ItemId;
	private String _URL;
	private int _NoOfLicence;
	private String _FileType;
	private Inventory _escapedModelProxy;
}