/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.sb.model.Item;
import com.sb.model.ItemModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Item service. Represents a row in the &quot;item&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sb.model.ItemModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ItemImpl}.
 * </p>
 *
 * @author amifxw0
 * @see ItemImpl
 * @see com.sb.model.Item
 * @see com.sb.model.ItemModel
 * @generated
 */
public class ItemModelImpl extends BaseModelImpl<Item> implements ItemModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a item model instance should use the {@link com.sb.model.Item} interface instead.
	 */
	public static final String TABLE_NAME = "item";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ItemId", Types.INTEGER },
			{ "Num", Types.VARCHAR },
			{ "Title", Types.VARCHAR },
			{ "Artist", Types.VARCHAR },
			{ "ReleaseDate", Types.TIMESTAMP },
			{ "ListPrice", Types.DOUBLE },
			{ "Price", Types.DOUBLE },
			{ "Version", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table item (ItemId INTEGER not null primary key IDENTITY,Num VARCHAR(75) null,Title VARCHAR(75) null,Artist VARCHAR(75) null,ReleaseDate DATE null,ListPrice DOUBLE,Price DOUBLE,Version INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table item";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sb.model.Item"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sb.model.Item"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sb.model.Item"));

	public ItemModelImpl() {
	}

	public int getPrimaryKey() {
		return _ItemId;
	}

	public void setPrimaryKey(int primaryKey) {
		setItemId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Integer(_ItemId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	public Class<?> getModelClass() {
		return Item.class;
	}

	public String getModelClassName() {
		return Item.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ItemId", getItemId());
		attributes.put("Num", getNum());
		attributes.put("Title", getTitle());
		attributes.put("Artist", getArtist());
		attributes.put("ReleaseDate", getReleaseDate());
		attributes.put("ListPrice", getListPrice());
		attributes.put("Price", getPrice());
		attributes.put("Version", getVersion());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer ItemId = (Integer)attributes.get("ItemId");

		if (ItemId != null) {
			setItemId(ItemId);
		}

		String Num = (String)attributes.get("Num");

		if (Num != null) {
			setNum(Num);
		}

		String Title = (String)attributes.get("Title");

		if (Title != null) {
			setTitle(Title);
		}

		String Artist = (String)attributes.get("Artist");

		if (Artist != null) {
			setArtist(Artist);
		}

		Date ReleaseDate = (Date)attributes.get("ReleaseDate");

		if (ReleaseDate != null) {
			setReleaseDate(ReleaseDate);
		}

		Double ListPrice = (Double)attributes.get("ListPrice");

		if (ListPrice != null) {
			setListPrice(ListPrice);
		}

		Double Price = (Double)attributes.get("Price");

		if (Price != null) {
			setPrice(Price);
		}

		Integer Version = (Integer)attributes.get("Version");

		if (Version != null) {
			setVersion(Version);
		}
	}

	public int getItemId() {
		return _ItemId;
	}

	public void setItemId(int ItemId) {
		_ItemId = ItemId;
	}

	public String getNum() {
		if (_Num == null) {
			return StringPool.BLANK;
		}
		else {
			return _Num;
		}
	}

	public void setNum(String Num) {
		_Num = Num;
	}

	public String getTitle() {
		if (_Title == null) {
			return StringPool.BLANK;
		}
		else {
			return _Title;
		}
	}

	public void setTitle(String Title) {
		_Title = Title;
	}

	public String getArtist() {
		if (_Artist == null) {
			return StringPool.BLANK;
		}
		else {
			return _Artist;
		}
	}

	public void setArtist(String Artist) {
		_Artist = Artist;
	}

	public Date getReleaseDate() {
		return _ReleaseDate;
	}

	public void setReleaseDate(Date ReleaseDate) {
		_ReleaseDate = ReleaseDate;
	}

	public double getListPrice() {
		return _ListPrice;
	}

	public void setListPrice(double ListPrice) {
		_ListPrice = ListPrice;
	}

	public double getPrice() {
		return _Price;
	}

	public void setPrice(double Price) {
		_Price = Price;
	}

	public int getVersion() {
		return _Version;
	}

	public void setVersion(int Version) {
		_Version = Version;
	}

	@Override
	public Item toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Item)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		ItemImpl itemImpl = new ItemImpl();

		itemImpl.setItemId(getItemId());
		itemImpl.setNum(getNum());
		itemImpl.setTitle(getTitle());
		itemImpl.setArtist(getArtist());
		itemImpl.setReleaseDate(getReleaseDate());
		itemImpl.setListPrice(getListPrice());
		itemImpl.setPrice(getPrice());
		itemImpl.setVersion(getVersion());

		itemImpl.resetOriginalValues();

		return itemImpl;
	}

	public int compareTo(Item item) {
		int primaryKey = item.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Item item = null;

		try {
			item = (Item)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		int primaryKey = item.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Item> toCacheModel() {
		ItemCacheModel itemCacheModel = new ItemCacheModel();

		itemCacheModel.ItemId = getItemId();

		itemCacheModel.Num = getNum();

		String Num = itemCacheModel.Num;

		if ((Num != null) && (Num.length() == 0)) {
			itemCacheModel.Num = null;
		}

		itemCacheModel.Title = getTitle();

		String Title = itemCacheModel.Title;

		if ((Title != null) && (Title.length() == 0)) {
			itemCacheModel.Title = null;
		}

		itemCacheModel.Artist = getArtist();

		String Artist = itemCacheModel.Artist;

		if ((Artist != null) && (Artist.length() == 0)) {
			itemCacheModel.Artist = null;
		}

		Date ReleaseDate = getReleaseDate();

		if (ReleaseDate != null) {
			itemCacheModel.ReleaseDate = ReleaseDate.getTime();
		}
		else {
			itemCacheModel.ReleaseDate = Long.MIN_VALUE;
		}

		itemCacheModel.ListPrice = getListPrice();

		itemCacheModel.Price = getPrice();

		itemCacheModel.Version = getVersion();

		return itemCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{ItemId=");
		sb.append(getItemId());
		sb.append(", Num=");
		sb.append(getNum());
		sb.append(", Title=");
		sb.append(getTitle());
		sb.append(", Artist=");
		sb.append(getArtist());
		sb.append(", ReleaseDate=");
		sb.append(getReleaseDate());
		sb.append(", ListPrice=");
		sb.append(getListPrice());
		sb.append(", Price=");
		sb.append(getPrice());
		sb.append(", Version=");
		sb.append(getVersion());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.sb.model.Item");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ItemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Num</column-name><column-value><![CDATA[");
		sb.append(getNum());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Artist</column-name><column-value><![CDATA[");
		sb.append(getArtist());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ReleaseDate</column-name><column-value><![CDATA[");
		sb.append(getReleaseDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ListPrice</column-name><column-value><![CDATA[");
		sb.append(getListPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Item.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Item.class
		};
	private int _ItemId;
	private String _Num;
	private String _Title;
	private String _Artist;
	private Date _ReleaseDate;
	private double _ListPrice;
	private double _Price;
	private int _Version;
	private Item _escapedModelProxy;
}