/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sb.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import com.sb.model.Item;

import com.sb.service.InventoryLocalService;
import com.sb.service.ItemBandMembersLocalService;
import com.sb.service.ItemLocalService;
import com.sb.service.PurchaseItemLocalService;
import com.sb.service.PurchaseOrderLocalService;
import com.sb.service.persistence.InventoryPersistence;
import com.sb.service.persistence.ItemBandMembersPersistence;
import com.sb.service.persistence.ItemPersistence;
import com.sb.service.persistence.PurchaseItemPersistence;
import com.sb.service.persistence.PurchaseOrderPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the item local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.sb.service.impl.ItemLocalServiceImpl}.
 * </p>
 *
 * @author amifxw0
 * @see com.sb.service.impl.ItemLocalServiceImpl
 * @see com.sb.service.ItemLocalServiceUtil
 * @generated
 */
public abstract class ItemLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements ItemLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.sb.service.ItemLocalServiceUtil} to access the item local service.
	 */

	/**
	 * Adds the item to the database. Also notifies the appropriate model listeners.
	 *
	 * @param item the item
	 * @return the item that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public Item addItem(Item item) throws SystemException {
		item.setNew(true);

		return itemPersistence.update(item, false);
	}

	/**
	 * Creates a new item with the primary key. Does not add the item to the database.
	 *
	 * @param ItemId the primary key for the new item
	 * @return the new item
	 */
	public Item createItem(int ItemId) {
		return itemPersistence.create(ItemId);
	}

	/**
	 * Deletes the item with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param ItemId the primary key of the item
	 * @return the item that was removed
	 * @throws PortalException if a item with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	public Item deleteItem(int ItemId) throws PortalException, SystemException {
		return itemPersistence.remove(ItemId);
	}

	/**
	 * Deletes the item from the database. Also notifies the appropriate model listeners.
	 *
	 * @param item the item
	 * @return the item that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	public Item deleteItem(Item item) throws SystemException {
		return itemPersistence.remove(item);
	}

	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Item.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return itemPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return itemPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return itemPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return itemPersistence.countWithDynamicQuery(dynamicQuery);
	}

	public Item fetchItem(int ItemId) throws SystemException {
		return itemPersistence.fetchByPrimaryKey(ItemId);
	}

	/**
	 * Returns the item with the primary key.
	 *
	 * @param ItemId the primary key of the item
	 * @return the item
	 * @throws PortalException if a item with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public Item getItem(int ItemId) throws PortalException, SystemException {
		return itemPersistence.findByPrimaryKey(ItemId);
	}

	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return itemPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the items.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of items
	 * @param end the upper bound of the range of items (not inclusive)
	 * @return the range of items
	 * @throws SystemException if a system exception occurred
	 */
	public List<Item> getItems(int start, int end) throws SystemException {
		return itemPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of items.
	 *
	 * @return the number of items
	 * @throws SystemException if a system exception occurred
	 */
	public int getItemsCount() throws SystemException {
		return itemPersistence.countAll();
	}

	/**
	 * Updates the item in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param item the item
	 * @return the item that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public Item updateItem(Item item) throws SystemException {
		return updateItem(item, true);
	}

	/**
	 * Updates the item in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param item the item
	 * @param merge whether to merge the item with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
	 * @return the item that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public Item updateItem(Item item, boolean merge) throws SystemException {
		item.setNew(false);

		return itemPersistence.update(item, merge);
	}

	/**
	 * Returns the inventory local service.
	 *
	 * @return the inventory local service
	 */
	public InventoryLocalService getInventoryLocalService() {
		return inventoryLocalService;
	}

	/**
	 * Sets the inventory local service.
	 *
	 * @param inventoryLocalService the inventory local service
	 */
	public void setInventoryLocalService(
		InventoryLocalService inventoryLocalService) {
		this.inventoryLocalService = inventoryLocalService;
	}

	/**
	 * Returns the inventory persistence.
	 *
	 * @return the inventory persistence
	 */
	public InventoryPersistence getInventoryPersistence() {
		return inventoryPersistence;
	}

	/**
	 * Sets the inventory persistence.
	 *
	 * @param inventoryPersistence the inventory persistence
	 */
	public void setInventoryPersistence(
		InventoryPersistence inventoryPersistence) {
		this.inventoryPersistence = inventoryPersistence;
	}

	/**
	 * Returns the item local service.
	 *
	 * @return the item local service
	 */
	public ItemLocalService getItemLocalService() {
		return itemLocalService;
	}

	/**
	 * Sets the item local service.
	 *
	 * @param itemLocalService the item local service
	 */
	public void setItemLocalService(ItemLocalService itemLocalService) {
		this.itemLocalService = itemLocalService;
	}

	/**
	 * Returns the item persistence.
	 *
	 * @return the item persistence
	 */
	public ItemPersistence getItemPersistence() {
		return itemPersistence;
	}

	/**
	 * Sets the item persistence.
	 *
	 * @param itemPersistence the item persistence
	 */
	public void setItemPersistence(ItemPersistence itemPersistence) {
		this.itemPersistence = itemPersistence;
	}

	/**
	 * Returns the item band members local service.
	 *
	 * @return the item band members local service
	 */
	public ItemBandMembersLocalService getItemBandMembersLocalService() {
		return itemBandMembersLocalService;
	}

	/**
	 * Sets the item band members local service.
	 *
	 * @param itemBandMembersLocalService the item band members local service
	 */
	public void setItemBandMembersLocalService(
		ItemBandMembersLocalService itemBandMembersLocalService) {
		this.itemBandMembersLocalService = itemBandMembersLocalService;
	}

	/**
	 * Returns the item band members persistence.
	 *
	 * @return the item band members persistence
	 */
	public ItemBandMembersPersistence getItemBandMembersPersistence() {
		return itemBandMembersPersistence;
	}

	/**
	 * Sets the item band members persistence.
	 *
	 * @param itemBandMembersPersistence the item band members persistence
	 */
	public void setItemBandMembersPersistence(
		ItemBandMembersPersistence itemBandMembersPersistence) {
		this.itemBandMembersPersistence = itemBandMembersPersistence;
	}

	/**
	 * Returns the purchase item local service.
	 *
	 * @return the purchase item local service
	 */
	public PurchaseItemLocalService getPurchaseItemLocalService() {
		return purchaseItemLocalService;
	}

	/**
	 * Sets the purchase item local service.
	 *
	 * @param purchaseItemLocalService the purchase item local service
	 */
	public void setPurchaseItemLocalService(
		PurchaseItemLocalService purchaseItemLocalService) {
		this.purchaseItemLocalService = purchaseItemLocalService;
	}

	/**
	 * Returns the purchase item persistence.
	 *
	 * @return the purchase item persistence
	 */
	public PurchaseItemPersistence getPurchaseItemPersistence() {
		return purchaseItemPersistence;
	}

	/**
	 * Sets the purchase item persistence.
	 *
	 * @param purchaseItemPersistence the purchase item persistence
	 */
	public void setPurchaseItemPersistence(
		PurchaseItemPersistence purchaseItemPersistence) {
		this.purchaseItemPersistence = purchaseItemPersistence;
	}

	/**
	 * Returns the purchase order local service.
	 *
	 * @return the purchase order local service
	 */
	public PurchaseOrderLocalService getPurchaseOrderLocalService() {
		return purchaseOrderLocalService;
	}

	/**
	 * Sets the purchase order local service.
	 *
	 * @param purchaseOrderLocalService the purchase order local service
	 */
	public void setPurchaseOrderLocalService(
		PurchaseOrderLocalService purchaseOrderLocalService) {
		this.purchaseOrderLocalService = purchaseOrderLocalService;
	}

	/**
	 * Returns the purchase order persistence.
	 *
	 * @return the purchase order persistence
	 */
	public PurchaseOrderPersistence getPurchaseOrderPersistence() {
		return purchaseOrderPersistence;
	}

	/**
	 * Sets the purchase order persistence.
	 *
	 * @param purchaseOrderPersistence the purchase order persistence
	 */
	public void setPurchaseOrderPersistence(
		PurchaseOrderPersistence purchaseOrderPersistence) {
		this.purchaseOrderPersistence = purchaseOrderPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Returns the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		PersistedModelLocalServiceRegistryUtil.register("com.sb.model.Item",
			itemLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister("com.sb.model.Item");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
	}

	protected Class<?> getModelClass() {
		return Item.class;
	}

	protected String getModelClassName() {
		return Item.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = itemPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = InventoryLocalService.class)
	protected InventoryLocalService inventoryLocalService;
	@BeanReference(type = InventoryPersistence.class)
	protected InventoryPersistence inventoryPersistence;
	@BeanReference(type = ItemLocalService.class)
	protected ItemLocalService itemLocalService;
	@BeanReference(type = ItemPersistence.class)
	protected ItemPersistence itemPersistence;
	@BeanReference(type = ItemBandMembersLocalService.class)
	protected ItemBandMembersLocalService itemBandMembersLocalService;
	@BeanReference(type = ItemBandMembersPersistence.class)
	protected ItemBandMembersPersistence itemBandMembersPersistence;
	@BeanReference(type = PurchaseItemLocalService.class)
	protected PurchaseItemLocalService purchaseItemLocalService;
	@BeanReference(type = PurchaseItemPersistence.class)
	protected PurchaseItemPersistence purchaseItemPersistence;
	@BeanReference(type = PurchaseOrderLocalService.class)
	protected PurchaseOrderLocalService purchaseOrderLocalService;
	@BeanReference(type = PurchaseOrderPersistence.class)
	protected PurchaseOrderPersistence purchaseOrderPersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ItemLocalServiceClpInvoker _clpInvoker = new ItemLocalServiceClpInvoker();
}